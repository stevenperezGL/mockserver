{
  "parser": "babel-eslint",
  "extends": ["eslint:recommended"],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "modules": true
    }
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "0.14.7"
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "mocha": true,
    "es6": true
  },
  "rules": {
    // require file to end with single newline
    "eol-last": 2,
    // use the type-safe equality operators === and !== instead of their regular counterparts == and !=
    "eqeqeq": 2,
    // suggest to use let or const instead of var
    "no-var": 0,
    // If a variable is never modified, using the const declaration is better
    "prefer-const": 0,
    // require or disallow padding within blocks (padded-blocks)
    "padded-blocks": [2, { "blocks": "never" }],
    // Disallow or enforce spaces inside of brackets (array-bracket-spacing)
    "array-bracket-spacing": ["error", "never"],
    // enforce consistent spacing inside braces (object-curly-spacing)
    "object-curly-spacing": [2, "never"],
    // enforce a maximum line length (max-len)
    "max-len": [2, 120],
    // disallow trailing spaces at the end of lines
    "no-trailing-spaces": 2,
    // disallow the space around a semicolon
    // disallow nested ternary expressions (no-nested-ternary)
    "no-nested-ternary": 2,
    "semi-spacing": 2,
    // require or disallow semicolons instead of ASI (semi)
    "semi": 2,
    // Comma style (comma-style)
    "comma-style": [2, "last"],
    // require Space Before Blocks
    "space-before-blocks": [2, { "keywords": "always" }],
    // require Space Before else Block
    "keyword-spacing": [2, { "before": true }],
    // require space before and after arrow function's arrow
    "arrow-spacing": [2, { "before": true, "after": true }],
    // Disallow lexical declarations in case/default clauses (no-case-declarations)
    "no-case-declarations": 2,
    // Require Brace Style (brace-style)
    "brace-style": 2,
    // require spacing around infix operators (space-infix-ops)
    "space-infix-ops": 2,
    // enforces spacing after commas
    "comma-spacing": [2, {"before": false, "after": true}],
    // trailing commas in object literals
    "comma-dangle": [2, "always-multiline"],
    // disallow Use of console
    "no-console": 1,
    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,
    // don't allow unused vars and functions. allow unused function params.
    "no-unused-vars": [2, { "args": "none" }],
    // only allow single quotes in javascript
    "quotes": [2, "single"],
    // require quotes around object literal property names (quote-props)
    "quote-props": [2, "as-needed"],
    // Enforces return statements in callbacks of arrayâ€™s methods (array-callback-return)
    "array-callback-return": 2,
    // Disallow Functions in Loops (no-loop-func)
    "no-loop-func": 2,
    // Disallow Reassignment of Function Parameters (no-param-reassign)
    "no-param-reassign": 2,
    // Disallow Iterator (no-iterator)
    "no-iterator": 2,
    // Require or disallow a space before function parenthesis (space-before-function-paren)
    "space-before-function-paren": [2, {
      "anonymous": "always",
      "named": "always",
      "asyncArrow": "ignore"
    }],
    // Suggest using arrow functions as callbacks. (prefer-arrow-callback)
    "prefer-arrow-callback": 2,
    // Suggest using template literals instead of string concatenation. (prefer-template)
    "prefer-template": 2,
    // only allow double quotes for jsx attributes, unless the attr contains quotes (since escaping is impossible)
    // Require Object Literal Shorthand Syntax
    "object-shorthand": [2, "properties"]
  }

}
